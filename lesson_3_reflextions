When would you want to use a remote repository rather than keeping all your work local?

	When I want to colaborate with others and when I want to have a backup of my project and have access to it from anywhere where I have internet conection. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	I was thinking in the case when we have working in the local repository and make some commits on the master branch and someone on the remote repository commits something. In that case I don't know what will happen in both, if we make git pull manually or automatically because we are going to have a conflict. But I believe that this issues could be resolve more easy if we makes the pull changes manually 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Forks operates only on GitHub (remote repository) while branches operates only in Git (local respository) and clones, operates on both, locally and remotelly.

	Forks is used when you want to start the project with the base of the code of someone (and maybe his colaborators) else. Also, this gives the proper credit to that person. Forks is also used when you don't have permision to push to that repository.

	Clones is used when you want to copy a remote repository to your local machine or make a copy of your local repository to your own machine.

	Branches are used when you want to experiment or fix something paralel to the development of your master branch. This allow to colaborate as well as don't have the risk to modify something that was already working.

What is the benefit of having a copy of the last known state of the remote stored locally?
	That you don't going to have future merge conflicts. Also, you are going to work in most tecent version of your project.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	I will send a copy of the last version to the other person. We are going to wrok in paralel. Once both finish, we need to meeting to discuss what we have modified and discuss what changes need to be made. 

	It would be easier to use the above method when you a re working with two or three person son small projects and when working on some area doen't affect others.

	It would be harder when you have a big team working on the same complex problem trying to improve the same secction of code.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	When you want that someone else reviw the changes your made as well as inform the team of colaboration what you wnat to do. I other words I see this as a sugestion to modify some section of the code.

	The separate brach has the benefit that you take into a consideration the opinions of others team members.
	The benefit to make changes directly in master is that you only need to use a few git commands to achieve it. It's much faster and much less complex that do it in a separate branch.